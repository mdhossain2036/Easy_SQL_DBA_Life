
# ********************************************************************************************************# SQL Server Installation:# Written By: Md Hossain June21, 2013# Modified By:# This script can be used to fully automate or simply standardize SQL installations.# **********************************************************************************# Known Bugs: # 1. This script requires that the $MediaLocation variable not contain any spaces. Dashes and # underscores are acceptable. A space in the location will break on line 316 referring to a cmd.exe call.# Attempts to allow handling of a space have resulted in other functionality breaking.# 2. Passwords, entered or passed through parameters should not contain double quotes.# ********************************************************************************************************param( [boolean]$InstallTypeValid = $false, [string]$InstallType = "0", [boolean]$InstallActionValid = $false, [string]$InstallAction = "0", [boolean]$ClusterIPValid = $false, [string]$ClusterIP = "", [boolean]$ClusterSubnetValid = $false, [string]$ClusterSubnet = "", [string]$ClusterName = "",    [string]$InstanceName = "MSSQLSERVER", [string]$ClusterFailoverDiskNames = "`"SQL-$InstanceName`"", [string]$ClusterNetworkName = "Cluster Network 1", [boolean]$AppDiskExists = $true, [boolean]$DataDiskExists = $true, [boolean]$LogDiskExists = $true, [boolean]$BackupDiskExists = $true, [string]$AppDisk = "D:", [string]$DataDisk = "E:", [string]$LogDisk = "E:", [string]$BackupDisk = "E:", [string]$SQLDataDir = "$DataDisk\MSSQL\Data", [string]$SQLTempDBDir = "$DataDisk\MSSQL\Data\TempDB", [string]$SQLLogDir = "$LogDisk\MSSQL\Logs", [string]$SQLTempDBLogDir = "$LogDisk\MSSQL\Logs\TempDB", [string]$SQLBackupDir = "$BackupDisk\MSSQL\Backups", [string]$ASDataDir = "$DataDisk\MSSQL\Data\OLAP", [string]$ASTempDir = "$DataDisk\MSSQL\Temp", [string]$ASConfigDir = "$DataDisk\MSSQL\Data\OLAP\Config", [string]$ASLogDir = "$LogDisk\MSSQL\Logs\OLAP", [string]$ASBackupDir = "$BackupDisk\MSSQL\Backup\OLAP", [string]$SQLComponents = "SQLEngine`,Replication`,FullText`,BC`,ADV_SSMS", [string]$ASComponents = "AS", [string]$RSComponents = "RS", [string]$InstallSharedDirectory = "D:\Program Files\Microsoft SQL Server", [string]$InstallSharedWOWDirectory = "D:\Program Files(x86)\Microsoft SQL Server", [string]$SecurityMode = "SQL", [string]$ASServiceAccountName = "DOMAINNAME\`$SQLAS2012", [string]$ASServiceAccountPassword = "", [string]$ASServiceDomainGroup = "DOMAINNAME\SQL 2012 Admins", [string]$RSServiceAccountName = "DOMAINNAME\`$SQLRS2012", [string]$RSServiceAccountPassword = "", [string]$SQLServiceAccountName = "DOMAINNAME\`$SQL2012", [string]$SQLServiceAccountPassword = "", [string]$SQLServiceDomainGroup = "DOMAINNAME\SQL 2012 Admins", [string]$SQLAgentAccountName = "DOMAINNAME\`$SQLAgent2012", [string]$SQLAgentAccountPassword = "", [string]$SQLAgentDomainGroup = "DOMAINNAME\SQL 2012 Admins", [string]$SQLSAAccountPassword = "", [string]$ASSysAdminAccounts = "`"DOMAINNAME\MS SQL Server Admins Group`" `"DOMAINNAME\SQL 2012 Admins`"",  [string]$SQLSysAdminAccounts = "`"DOMAINNAME\MS SQL Server Admins Group`" `"DOMAINNAME\SQL 2012 Admins`"", [string]$MediaLocation = "D:\SQL_2012", [string]$InstallLog = "$MediaLocation\ScriptedInstall.log", [int32]$EventNumber = 3001, [string]$EventMessage = "The Install SQL Script was not able to run. The cause of this error could not be identified.", [string]$EventSource = "Install SQL Script", [string]$EventLogType = "Application", [int16]$EventCategory = 0)$arrCommands = New-Object System.Collections.ArrayList$InstallParameters = ""$InstallBase = ""$InstallAS = ""$InstallDE = ""$InstallRS = ""function AttemptCommand(){ param (  [string[]]$arrCommands = "Write-Host `"Error invalid parameters passed to AttemptCommand function.`"",  [string]$ResultMessage = "Error invalid parameters passed to AttemptCommand function." ) # Attempts to run the command passed and writes either an error or success to the event log. Write-Host "$ResultMessage" $ObjectSuccess = $true # If Commands array is passed as a null an error event is automatically created. if ($arrCommands -ne $null) {  Try   {   foreach($strCommand in $arrCommands)   {    Invoke-Expression $strCommand   }  }  Catch  {   $ObjectSuccess = $false   $EventMessage = "Error $ResultMessage"  }  Finally  {   if ($ObjectSuccess = $true){$EventMessage = "Completed $ResultMessage"}   CreateEvent -EventMessage $EventMessage -EventSource $EventSource -EventLogType $EventLogType -EventNumber $EventNumber -EventCategory $EventCategory -ObjectSuccess $ObjectSuccess  } } else {  $ObjectSuccess = $true  $EventMessage = "$ResultMessage This command failed to execute. There is a problem in calling this command within the script."  CreateEvent -EventMessage $EventMessage -EventSource $EventSource -EventLogType $EventLogType -EventNumber $EventNumber -EventCategory $EventCategory -ObjectSuccess $ObjectSuccess }}function CheckASFolders(){ # ************************ # Check for required directories for SQL Analysis Services, create them if required # ************************ Write-Host "Checking for required Analysis Services Folders." if(!(Test-Path $ASDataDir)) {CreateFolder("$ASDataDir")} if(!(Test-Path $ASTempDir)) {CreateFolder("$ASTempDir")} if(!(Test-Path $ASConfigDir)) {CreateFolder("$ASConfigDir")} if(!(Test-Path $ASLogDir)) {CreateFolder("$ASLogDir")} if(!(Test-Path $ASBackupDir)) {CreateFolder("$ASBackupDir")}}function CheckDisk([string]$DiskPath){ # ************************ # Check if the Drive letter passed exists on the local system, if not create failure event # ************************ $arrCommands.Clear() $arrCommands.Add("$DiskExists = Test-Path $DiskPath\") $ResultMessage = "Testing for Disk $DiskPath." AttemptCommand -arrCommands $arrCommands -ResultMessage $ResultMessage if ($DiskExists -eq $true) {return $true} else {return $false}}function CheckOSVersion (){ # ************************ # Check if OS Version is greater than or equal to 6.0 (2008) and if architecture is 64-Bit otherwise, create failure event # ************************ $MachineOS = Get-WmiObject -Class Win32_OperatingSystem | Select-Object version $MachineArchitecture = $env:PROCESSOR_ARCHITECTURE if (($MachineOS -like "@{version=6*") -and ($MachineArchitecture -like "AMD64")) {Return $true} else {return $false}}function CheckSQLFolders(){ # ************************ # Check for required directories for SQL Data Engine, create them if required # ************************ Write-Host "Checking for required SQL Folders." if(!(Test-Path $SQLDataDir)) {CreateFolder("$SQLDataDir")} if(!(Test-Path $SQLTempDBDir)) {CreateFolder("$SQLTempDBDir")} if(!(Test-Path $SQLLogDir)) {CreateFolder("$SQLLogDir")} if(!(Test-Path $SQLTempDBLogDir)) {CreateFolder("$SQLTempDBLogDir")} if(!(Test-Path $SQLBackupDir)) {CreateFolder("$SQLBackupDir")}}function CreateEvent(){ # ************************ # Create an event either informational or error to the specified Log Type # ************************ param (  [string]$EventMessage = "The Install SQL Script was not able to run. The cause of this error could not be identified.",  [string]$EventSource = "Install SQL Script",  [string]$EventLogType = "Application",  [int32]$EventNumber = 3001,  [int16]$EventCategory = 0,  [boolean]$ObjectSuccess = $false ) # ************************ # Check if EventSource exists as a source in the  event log. If not it will be created. # ************************ if (![System.Diagnostics.EventLog]::SourceExists("$EventSource")) { [System.Diagnostics.EventLog]::CreateEventSource("$EventSource", "$EventLogType") } if ($ObjectSuccess -eq $true) {$EventType = "Information"} else {$EventType = "Error"} Write-EventLog -LogName $EventLogType -Source $EventSource -EventID $EventNumber -Message "$EventMessage" -EntryType $EventType -Category $EventCategory Write-Host "$EventMessage Event ID # $EventNumber was logged in the $EventLogType Log."}function CreateFirewallRules(){ # ************************ # Open Inbound and Outbound Windows Firewall Ports for all Installations # ************************ $arrCommands.Clear() $arrCommands.Add("netsh advfirewall firewall add rule name=`"HTTP (TCP80-In)`" dir=in action=allow profile=domain protocol=TCP localport=80") $arrCommands.Add("netsh advfirewall firewall add rule name=`"HTTP (TCP80-Out)`" dir=out action=allow profile=domain protocol=TCP localport=80") $arrCommands.Add("netsh advfirewall firewall add rule name=`"SSL (TCP443-In)`" dir=in action=allow profile=domain protocol=TCP localport=443") $arrCommands.Add("netsh advfirewall firewall add rule name=`"SSL (TCP443-Out)`" dir=out action=allow profile=domain protocol=TCP localport=443") $ResultMessage = "Creating Windows Firewall rules for SQL Installation." AttemptCommand -arrCommands $arrCommands -ResultMessage $ResultMessage}function CreateFirewallRulesDE(){ # ************************ # Open Inbound and Outbound Windows Firewall Ports required for Database Engine installations # ************************ $arrCommands.Clear() $arrCommands.Add("netsh advfirewall firewall add rule name=`"SQL Management Browser (UDP1434-In)`" dir=in action=allow profile=domain protocol=UDP localport=1434") $arrCommands.Add("netsh advfirewall firewall add rule name=`"SQL Management Browser (UDP1434-Out)`" dir=out action=allow profile=domain protocol=UDP localport=1434") $arrCommands.Add("netsh advfirewall firewall add rule name=`"SQL Server (TCP1433-In)`" dir=in action=allow profile=domain protocol=TCP localport=1433") $arrCommands.Add("netsh advfirewall firewall add rule name=`"SQL Server (TCP1433-Out)`" dir=out action=allow profile=domain protocol=TCP localport=1433") $arrCommands.Add("netsh advfirewall firewall add rule name=`"SQL Admin Connection (TCP1434-In)`" dir=in action=allow profile=domain protocol=TCP localport=1434") $arrCommands.Add("netsh advfirewall firewall add rule name=`"SQL Admin Connection (TCP1434-Out)`" dir=out action=allow profile=domain protocol=TCP localport=1434") $arrCommands.Add("netsh advfirewall firewall add rule name=`"SQL Service Broker (TCP4022-In)`" dir=in action=allow profile=domain protocol=TCP localport=4022") $arrCommands.Add("netsh advfirewall firewall add rule name=`"SQL Service Broker (TCP4022-Out)`" dir=out action=allow profile=domain protocol=TCP localport=4022") $arrCommands.Add("netsh advfirewall firewall add rule name=`"SQL Debugger/RPC (TCP135-In)`" dir=in action=allow profile=domain protocol=TCP localport=135") $arrCommands.Add("netsh advfirewall firewall add rule name=`"SQL Debugger/RPC (TCP135-Out)`" dir=out action=allow profile=domain protocol=TCP localport=135") $ResultMessage = "Creating Windows Firewall rules for SQL Database Engine Installation." AttemptCommand -arrCommands $arrCommands -ResultMessage $ResultMessage}function CreateFirewallRulesAS(){  # ********************************************************************************************* # Open Inbound and Outbound Windows Firewall Ports required for Analysis Services installations # ********************************************************************************************* $arrCommands.Clear() $arrCommands.Add("netsh advfirewall firewall add rule name=`"Analysis Services (TCP2383-In)`" dir=in action=allow profile=domain protocol=TCP localport=2383") $arrCommands.Add("netsh advfirewall firewall add rule name=`"Analysis Services (TCP2383-Out)`" dir=out action=allow profile=domain protocol=TCP localport=2383") $arrCommands.Add("netsh advfirewall firewall add rule name=`"SQL Browser (TCP2382-In)`" dir=in action=allow profile=domain protocol=TCP localport=2382") $arrCommands.Add("netsh advfirewall firewall add rule name=`"SQL Browser (TCP2382-Out)`" dir=out action=allow profile=domain protocol=TCP localport=2382") $ResultMessage = "Creating Windows Firewall rules for SQL Analysis Services Installation." AttemptCommand -arrCommands $arrCommands -ResultMessage $ResultMessage}function CreateFolder([string]$FolderPath){ $arrCommands.Clear() $arrCommands.Add("New-Item $FolderPath -type directory") $ResultMessage = "Creating Directory $FolderPath." AttemptCommand -arrCommands $arrCommands -ResultMessage $ResultMessage}function CreateInstallCommand(){  if ($InstallBase -ne "") {Clear-Variable $InstallBase} if ($InstallAS -ne "") {Clear-Variable $InstallAS} if ($InstallDE -ne "") {Clear-Variable $InstallDE} if ($InstallRS -ne "") {Clear-Variable $InstallRS} if ($InstallParameters -ne "") {Clear-Variable $InstallParameters} if ($InstallAction -eq "Install") {  $InstallBase = "/QS /ACTION=$InstallAction /IACCEPTSQLSERVERLICENSETERMS /ENU /UpdateEnabled=0 /FEATURES=$InstallFeatures /INSTALLSHAREDDIR=`"$InstallSharedDirectory`" /INSTALLSHAREDWOWDIR=`"$InstallSharedWOWDirectory`" /INSTANCENAME=$InstanceName /AGTSVCACCOUNT=`"$SQLAgentAccountName`" /AGTSVCPASSWORD=`"$SQLAgentAccountPassword`""  $InstallAS = "/ASBACKUPDIR=`"$ASBackupDir`" /ASCONFIGDIR=`"$ASConfigDir`" /ASDATADIR=`"$ASDataDir`" /ASLOGDIR=`"$ASLogDir`" /ASSVCACCOUNT=`"$ASServiceAccount`" /ASSVCPASSWORD=`"$ASServiceAccountPassword`" /ASDOMAINGROUP=`"$ASServiceDomainGroup`" /ASSYSADMINACCOUNTS=$ASSysAdminAccounts /ASTEMPDIR=`"$ASTempDir`""  $InstallDE = "/INSTALLSQLDATADIR=`"$SQLDataDir`" /SECURITYMODE=$SecurityMode /SAPWD=`"$SQLSAAccountPassword`" /SQLBACKUPDIR=`"$SQLBackupDir`" /SQLSVCACCOUNT=`"$SQLServiceAccountName`" /SQLSVCPASSWORD=`"$SQLServiceAccountPassword`" /SQLSYSADMINACCOUNTS=$SQLSysAdminAccounts /SQLTEMPDBDIR=`"$SQLTempDBDir`" /SQLTEMPDBLOGDIR=`"$SQLTempDBLogDir`" /SQLUSERDBDIR=`"$SQLDataDir`" /SQLUSERDBLOGDIR=`"$SQLLogDir`""  $InstallRS = "/RSSVCACCOUNT=`"$RSServiceAccountName`" /RSSVCPASSWORD=`"$RSServiceAccountPassword`"" } elseif ($InstallAction -eq "PrepareFailoverCluster") {  $InstallBase = "/QS /ACTION=$InstallAction /IACCEPTSQLSERVERLICENSETERMS /ENU /UpdateEnabled=0 /FEATURES=$InstallFeatures /INSTALLSHAREDDIR=`"$InstallSharedDirectory`" /INSTALLSHAREDWOWDIR=`"$InstallSharedWOWDirectory`" /INSTANCENAME=$InstanceName /AGTSVCACCOUNT=`"$SQLAgentAccountName`" /AGTSVCPASSWORD=`"$SQLAgentAccountPassword`" /AGTDOMAINGROUP=`"$SQLAgentDomainGroup`""  $InstallAS = "/ASSVCACCOUNT=`"$ASServiceAccountName`" /ASSVCPASSWORD=`"$ASServiceAccountPassword`" /ASDOMAINGROUP=`"$ASServiceDomainGroup`""  $InstallDE = "/SQLSVCACCOUNT=`"$SQLServiceAccountName`" /SQLSVCPASSWORD=`"$SQLServiceAccountPassword`"" } elseif ($InstallAction -eq "CompleteFailoverCluster") {  $InstallBase = "/QS /ACTION=$InstallAction /ENU /INSTANCENAME=$InstanceName /FAILOVERCLUSTERDISKS=$ClusterFailoverDiskNames /FAILOVERCLUSTERIPADDRESSES=`"IPv4;$ClusterIP;$ClusterNetworkName;$ClusterSubnet`" /FAILOVERCLUSTERNETWORKNAME=`"$ClusterName`""  $InstallAS = "/ASBACKUPDIR=`"$ASBackupDir`" /ASCONFIGDIR=`"$ASConfigDir`" /ASDATADIR=`"$ASDataDir`" /ASLOGDIR=`"$ASLogDir`" /ASSYSADMINACCOUNTS=$ASSysAdminAccounts /ASTEMPDIR=`"$ASTempDir`""  $InstallDE = "/INSTALLSQLDATADIR=`"$SQLDataDir`" /SECURITYMODE=$SecurityMode /SAPWD=`"$SQLSAAccountPassword`" /SQLBACKUPDIR=`"$SQLBackupDir`" /SQLSYSADMINACCOUNTS=$SQLSysAdminAccounts /SQLTEMPDBDIR=`"$SQLTempDBDir`" /SQLTEMPDBLOGDIR=`"$SQLTempDBLogDir`" /SQLUSERDBDIR=`"$SQLDataDir`" /SQLUSERDBLOGDIR=`"$SQLLogDir`"" } elseif ($InstallAction -eq "AddNode") {  $InstallBase = "/QS /ACTION=$InstallAction /IACCEPTSQLSERVERLICENSETERMS /ENU /UpdateEnabled=0 /INSTANCENAME=$InstanceName /FAILOVERCLUSTERIPADDRESSES=`"IPv4;$ClusterIP;$ClusterNetworkName;$ClusterSubnet`"  /AGTSVCACCOUNT=`"$ASServiceAccountName`" /AGTSVCPASSWORD=`"$ASServiceAccountPassword`""  $InstallAS = "/ASSVCACCOUNT=`"$ASServiceAccountName`" /ASSVCPASSWORD=`"$ASServiceAccountPassword`""  $InstallDE = "/SQLSVCACCOUNT=`"$SQLServiceAccountName`" /SQLSVCPASSWORD=`"$SQLServiceAccountPassword`"" } else {TerminalError -EventMessage "The Install SQL Script was not able to complete. An invalid installation action was attempted. $InstallAction"}  # ******************************************************** # Finalizing the install commands based on the InstallType. # ******************************************************** $InstallParameters = "$InstallBase" if ($InstallType -like "AS*") {$InstallParameters += "  $InstallAS"} if ($InstallType -like "*DE*") {$InstallParameters += " $InstallDE"} if ($InstallType -like "*RS") {$InstallParameters += " $InstallRS"} return $InstallParameters}function ExecuteInstall(){ param (  [string]$InstallParameters = "" ) # ************************ # Launch the setup with all parameters # ************************ if ($InstallParameters -ne "") {  $arrCommands.Clear()  $arrCommands.Add("New-Item $InstallLog -type file -force")  $ResultMessage = "Creating Installation Log $InstallLog."  AttemptCommand -arrCommands $arrCommands -ResultMessage $ResultMessage  Write-Host "Installation will begin using these parameters: `n cmd.exe /c $MediaLocation\setup.exe $InstallParameters >> `"$InstallLog`""  $arrCommands.Clear()  $arrCommands.Add("cmd.exe /c $MediaLocation\setup.exe $InstallParameters >> `"$InstallLog`"")  Write-Host $arrCommands  $ResultMessage = "Check $InstallLog to verify installation."  AttemptCommand -arrCommands $arrCommands -ResultMessage $ResultMessage } else {  TerminalError -EventMessage "Invalid installation parameters, install aborted." }}function InstallSQL(){ # *************************** # Getting Installation Values # *************************** while ($InstallActionValid -eq $false) {  Write-Host "Choose one of the following Configuration Types:"  Write-Host "1. Standalone SQL Install"  Write-Host "2. Prepare SQL Failover Cluster (1st Node)"  Write-Host "3. Complete SQL Failover Cluster (1st Node)"  Write-Host "4. Add Node to SQL Failover Cluster"  $InstallAction = Read-Host "Please enter Configuration Type (Ex. 1)"  switch ($InstallAction)  {   "1" {$InstallAction = "Install"; $InstallActionValid = $true}   "2" {$InstallAction = "PrepareFailoverCluster"; $InstallActionValid = $true}   "3" {$InstallAction = "CompleteFailoverCluster"; $InstallActionValid = $true}   "4" {$InstallAction = "AddNode"; $InstallActionValid = $true}   default {$InstallAction = "0"; $InstallActionValid = $false}  } }  while ($InstallTypeValid -eq $false) {  Write-Host "Choose one of the following Installation Types:"  Write-Host "1. Database Engine (DE)"  Write-Host "2. Analysis Services (AS)"  Write-Host "3. Reporting Services (RS)"  Write-Host "4. Analysis Services and Database Engine (AS,DE)"  Write-Host "5. Database Engine and Reporting Services (DE,RS)"  Write-Host "6. Analysis Services, Database Engine and Reporting Services (AS,DE,RS)"  Write-Host "Note: Reporting Services cannot be configured to clustered installation"  $InstallType = Read-Host "Please enter Installation Type (Ex. 1)"  switch ($InstallType)  {   "1" {$InstallType = "DE"; $InstallTypeValid = $true; $InstallFeatures = "$SQLComponents"}   "2" {$InstallType = "AS"; $InstallTypeValid = $true; $InstallFeatures = "$ASComponents"}   "3" {$InstallType = "RS"; $InstallTypeValid = $true; $InstallFeatures = "$RSComponents"}   "4" {$InstallType = "AS,DE"; $InstallTypeValid = $true; $InstallFeatures = "$ASComponents`,$SQLComponents"}   "5" {$InstallType = "DE,RS"; $InstallTypeValid = $true; $InstallFeatures = "$SQLComponents`,$RSComponents"}   "6" {$InstallType = "AS,DE,RS"; $InstallTypeValid = $true; $InstallFeatures = "$ASComponents`,$SQLComponents`,$RSComponents"}   default {$InstallType = "0"; $InstallTypeValid = $false; $InstallFeatures = ""}  } }  if (($InstallAction -ne "Install") -and ($InstallType -like "*RS*")) {  Write-Host "Invalid installation type. Reporting Services cannot be installed on a Cluster."  $InstallActionValid = $false  $InstallTypeValid = $false  GetInstallInfo } if (($InstallAction -ne "Install") -and ($InstallAction -ne "PrepareFailoverCluster")) {  while (($ClusterIPValid -eq $false) -or ($ClusterSubnetValid -eq $false) -or ($ClusterName -eq ""))  {   Write-Host "Cluster Configuration: $ClusterConfig"   Write-Host "Installation Type: $InstallType"   if ($ClusterIP -eq "") {$ClusterIP = Read-Host "Please enter the Cluster IP Address (Ex. 10.0.0.1)"}   else {Write-Host "Cluster IP Address: $ClusterIP"}   if ($ClusterSubnet -eq "") {$ClusterSubnet = Read-Host "Please enter the Cluster Subnet (Ex. 255.255.254.0)"}   else {Write-Host "Cluster Subnet: $ClusterSubnet"}   if ($ClusterName -eq "") {$ClusterName = Read-Host "Please enter the Cluster Network Name (Ex. IT111DB-SQL)"}   else {Write-Host "Cluster Name: $ClusterName"}   if ([System.Net.IPAddress]::Parse($ClusterIP))   {    $ClusterIPValid = $true    Write-Host "The Cluster IP entered is valid IP Address."   }   if ($ClusterIPValid -ne $true)   {    $ClusterIP = ""    Write-Host "The Cluster IP entered is not a valid IP Address."   }   if ([System.Net.IPAddress]::Parse($ClusterSubnet))   {    $ClusterSubnetValid = $true    Write-Host "The Cluster Subnet entered is a valid Subnet."   }   if ($ClusterSubnetValid -ne $true)   {    $ClusterSubnet = ""    Write-Host "The Cluster Subnet entered is not a valid Subnet."   }  } } # ********************************************************************* # Check Service Accounts and Passwords and prompt for them if required. # ********************************************************************* while (($ASServiceAccountName -eq "") -or ($RSServiceAccountName -eq "") -or ($SQLServiceAccountName -eq "") -or ($SQLAgentAccountName -eq "") -or ($ASServiceAccountPassword -eq "") -or ($RSServiceAccountPassword -eq "") -or ($SQLServiceAccountPassword -eq "") -or ($SQLAgentAccountPassword -eq "") -or ($SQLSAAccountPassword -eq "")) {  if ($ASServiceAccountName -eq "")  {   if ($InstallType -like "*AS*") {$ASServiceAccountName = Read-Host "Please enter account name for the Analysis Services, Service Account (ex. DOMAINNAME\$SQLAS2012)"}   else {$ASServiceAccountName = "NotNeeded"}  }  if ($RSServiceAccountName -eq "")  {   if ($InstallType -like "*RS*") {$RSServiceAccountName = Read-Host "Please enter account name for the Reporting Services, Service Account (ex. DOMAINNAME\$SQLRS2012)"}   else {$RSServiceAccountName = "NotNeeded"}  }  if ($SQLServiceAccountName -eq "")  {   if ($InstallType -like "*DE*") {$SQLServiceAccountName = Read-Host "Please enter account name for the SQL Service, Service Account (ex. DOMAINNAME\$SQL2012)"}   else {$SQLServiceAccountName = "NotNeeded"}  }  if ($SQLAgentAccountName -eq "")  {   $SQLAgentAccountName = Read-Host "Please enter account name for the SQL Agent, Service Account (ex. DOMAINNAME\$SQLAgent2012)"  }  if ($ASServiceAccountPassword -eq "")  {   if ($InstallType -like "*AS*") {$ASServiceAccountPassword = Read-Host "Please enter password for the Analysis Services, Service Account ($ASServiceAccountName)"}   else {$ASServiceAccountPassword = "NotNeeded"}  }  if ($RSServiceAccountPassword -eq "")  {   if ($InstallType -like "*RS*") {$RSServiceAccountPassword = Read-Host "Please enter password for the Reporting Services, Service Account ($RSServiceAccountName)"}   else {$RSServiceAccountPassword = "NotNeeded"}  }  if ($SQLServiceAccountPassword -eq "")  {   if ($InstallType -like "*DE*") {$SQLServiceAccountPassword = Read-Host "Please enter password for the SQL Service, Service Account ($SQLServiceAccountName)"}   else {$SQLServiceAccountPassword = "NotNeeded"}  }  if ($SQLAgentAccountPassword -eq "")  {   $SQLAgentAccountPassword = Read-Host "Please enter password for the SQL Agent, Service Account ($SQLAgentAccountName)"  }  if ($SQLSAAccountPassword -eq "")  {   if ($InstallType -like "*DE*") {$SQLSAAccountPassword = Read-Host "Please enter password for the SA Account for mixed moded authentication"}   else {$SQLSAAccountPassword = "NotNeeded"}  } } # ******************************************** # Create firewall rules for installation types. # ******************************************** if ($InstallAction -ne "PrepareFailoverCluster") {  CreateFirewallRules  if ($InstallType -like "*AS*") {CreateFirewallRulesAS}  if ($InstallType -like "*DE*") {CreateFirewallRulesDE} } # ********************************************* # Verify OS version is 64-Bit and 2008 or newer. # ********************************************* $PreReqOS = CheckOSVersion if ($PreReqOS -eq $false) {  TerminalError -EventMessage "The Install SQL Script was not able to run. This script can only run on a 64-Bit Server 2008 or newer system." } # ************************************* # Verify required disks are presented. # ************************************* if (CheckDisk($AppDisk) -eq $true) {$AppDiskExists = $true} if ($InstallAction -ne "AddNode") {  if (CheckDisk($DataDisk) -eq $true) {$DataDiskExists = $true}  if (CheckDisk($LogDisk) -eq $true) {$LogDiskExists = $true}  if (CheckDisk($BackupDisk) -eq $true) {$BackupDiskExists = $true} } else {  $DataDiskExists = $true  $LogDiskExists = $true  $BackupDiskExists = $true } if (($AppDiskExists -eq $false) -or ($DataDiskExists -eq $false) -or ($LogDiskExists -eq $false) -or ($BackupDiskExists -eq $false)) {  TerminalError -EventMessage "The Install SQL Script was not able to complete. This script requires all standardized drives be in place during installation. The standard drives required are Application Disk $AppDisk, Data Disk $DataDisk, Log Disk $LogDisk, and Backup Disk $BackupDisk." }  # ************************************************************ # Check for and create folders required for installation types. # ************************************************************ if ($InstallAction -ne "AddNode") {  if ($InstallType -like "*DE*") {CheckSQLFolders}  if ($InstallType -like "*AS*") {CheckASFolders} }  # ****************************************************************** # Set Installation Parameters based on InstallAction and InstallType. # ****************************************************************** $InstallParameters = CreateInstallCommand ExecuteInstall -InstallParameters $InstallParameters}function TerminalError(){ param (  [string]$EventMessage = "The Install SQL Script was not able to complete to due to an error." ) $ObjectSuccess = $false CreateEvent -EventMessage $EventMessage -EventSource $EventSource -EventLogType $EventLogType -EventNumber $EventNumber -EventCategory $EventCategory -ObjectSuccess $ObjectSuccess exit}InstallSQL# ************************# Script Complete# ************************$EventMessage = "Script Complete."$ObjectSuccess = $trueWrite-Host "$EventMessage"CreateEvent -EventMessage $EventMessage -EventSource $EventSource -EventLogType $EventLogType -EventNumber $EventNumber -EventCategory $EventCategory -ObjectSuccess $ObjectSuccess
